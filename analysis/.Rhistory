wide_mean_values <- dcast(mean_values, formula = Group ~ RatingType, value.var = 'x')
category_data <- dataset[dataset$RatingType == 'related',]
#so we can easily get a count of 'Neither', 'Both', 'Opioid', 'Meth'
category_data$count_col <- 1
#get counts of 'neither' ratings
counts_neither <- aggregate(category_data[category_data$RelatedCategory == 'Neither', c('count_col')],
by = list(Group = category_data[category_data$RelatedCategory == 'Neither', grouping_field]),
FUN = sum, na.rm = TRUE)
names(counts_neither) <- c('Group', 'CountNeither')
#'get count of 'meth' ratings
counts_meth <- aggregate(category_data[category_data$RelatedCategory == 'Meth', c('count_col')],
by = list(Group = category_data[category_data$RelatedCategory == 'Meth', grouping_field]),
FUN = sum, na.rm = TRUE)
names(counts_meth) <- c('Group', 'CountMeth')
all_counts <- merge(counts_neither, counts_meth, all = TRUE)
#get count of 'opioid' ratings
counts_opioid <- aggregate(category_data[category_data$RelatedCategory == 'Opioid', c('count_col')],
by = list(Group = category_data[category_data$RelatedCategory == 'Opioid', grouping_field]),
FUN = sum, na.rm = TRUE)
names(counts_opioid) <- c('Group', 'CountOpioid')
all_counts <- merge(all_counts, counts_opioid, all = TRUE)
#get count of 'both' ratings
counts_both <- aggregate(category_data[category_data$RelatedCategory == 'Both', c('count_col')],
by = list(Group = category_data[category_data$RelatedCategory == 'Both', grouping_field]),
FUN = sum, na.rm = TRUE)
names(counts_both) <- c('Group', 'CountBoth')
all_counts <- merge(all_counts, counts_both, all = TRUE)
#any 'NAs that appear here are ratings that never happened--e.g. control images that were never rated as related to meth
all_counts[is.na(all_counts)] <- 0
count_cols <- c('CountNeither', 'CountMeth', 'CountOpioid', 'CountBoth')
all_counts$FractionNeither <- all_counts$CountNeither / rowSums(all_counts[, count_cols])
all_counts$FractionMeth <- all_counts$CountMeth / rowSums(all_counts[, count_cols])
all_counts$FractionOpioid <- all_counts$CountOpioid / rowSums(all_counts[, count_cols])
all_counts$FractionBoth <- all_counts$CountBoth / rowSums(all_counts[, count_cols])
#this will be a number from -1 to 1: -1 for meth, 1 for opioid, and 0 for meth=opioid and many both/neither
all_counts$MethToOpioid <- (all_counts$CountOpioid - all_counts$CountMeth) / (all_counts$CountMeth + all_counts$CountOpioid + all_counts$CountBoth + all_counts$CountNeither)
#add prefix to all_counts column names
names(all_counts)[!(names(all_counts) %in% c('Group'))] <-
paste(prefix, names(all_counts)[!(names(all_counts) %in% c('Group'))], sep = '_')
#add _mean to the column names
names(wide_mean_values)[names(wide_mean_values) %in% c('arousal', 'craving', 'related', 'typicality', 'valence', 'valence_fromneutral')] <-
paste(prefix, names(wide_mean_values)[names(wide_mean_values) %in% c('arousal', 'craving', 'related', 'typicality', 'valence', 'valence_fromneutral')], 'mean', sep = '_')
#get raw SD for each image
sd_values <- aggregate(dataset[, c('Value')],
by = list(RatingType = dataset$RatingType, Group = dataset[, grouping_field]),
FUN = sd, na.rm = TRUE)
wide_sd_values <- dcast(sd_values, formula = Group ~ RatingType, value.var = 'x')
#add _sd to the column names
names(wide_sd_values)[names(wide_sd_values) %in% c('arousal', 'craving', 'related', 'typicality', 'valence', 'valence_fromneutral')] <-
paste(prefix, names(wide_sd_values)[names(wide_sd_values) %in% c('arousal', 'craving', 'related', 'typicality', 'valence', 'valence_fromneutral')], 'sd', sep = '_')
#merge them into one table
merged_summary_values <- merge(wide_mean_values, wide_sd_values)
merged_summary_values <- merge(merged_summary_values, all_counts)
return(merged_summary_values)
}
#also get abs(valence - 5) for each rating--distance from neutral
valence_rows <- subject_data[subject_data$RatingType == 'valence',]
valence_rows$RatingType <- 'valence_fromneutral'
valence_rows$Value <- abs(valence_rows$Value - 5)
subject_data <- rbind(subject_data, valence_rows)
all_data_summaries <- one_summary(subject_data, 'allsubjects', 'ImageSetFile')
injection_user_summaries <- one_summary(subject_data[subject_data$InjectionUser,], 'injectionusers', 'ImageSetFile')
noninjection_user_summaries <- one_summary(subject_data[!subject_data$InjectionUser,], 'noninjectionusers', 'ImageSetFile')
merged_summary_values <- merge(all_data_summaries, injection_user_summaries)
merged_summary_values <- merge(merged_summary_values, noninjection_user_summaries)
#now, add in HSV values computed by MATLAB
hsv_values <- read.csv('DCR_hsv_values.csv')
hsv_values$Group <- paste(hsv_values$ImageSet, hsv_values$File)
merged_summary_values <- merge(merged_summary_values, hsv_values)
#add in category column
category_data <- subject_data[!duplicated(subject_data$ImageSetFile), c('ImageSetFile', 'Category')]
names(category_data) <- c('Group', 'Category')
merged_summary_values <- merge(merged_summary_values, category_data)
merged_summary_values$p_cravingdelta_injectionVnon <- NA
###add in p-value for difference in craving between injection and non-injection users for each image
for (image in unique(subject_data$ImageSetFile)){
injection_craving_ratings <- subject_data[(subject_data$ImageSetFile == image) & subject_data$InjectionUser & subject_data$RatingType == 'craving', 'Value']
noninjection_craving_ratings <- subject_data[(subject_data$ImageSetFile == image) & (!subject_data$InjectionUser) & subject_data$RatingType == 'craving', 'Value']
this_test <- t.test(injection_craving_ratings, noninjection_craving_ratings)
merged_summary_values[merged_summary_values$Group == image, 'p_cravingdelta_injectionVnon'] <- this_test$p.value
}
###add in category means/SDs for the same measures
all_data_summaries_categories <- one_summary(subject_data, 'allsubjects', 'Category')
injection_user_summaries_categories <- one_summary(subject_data[subject_data$InjectionUser,], 'injectionusers', 'Category')
noninjection_user_summaries_categories <- one_summary(subject_data[!subject_data$InjectionUser,], 'noninjectionusers', 'Category')
merged_summary_values_categories <- merge(all_data_summaries_categories, injection_user_summaries_categories)
merged_summary_values_categories <- merge(merged_summary_values_categories, noninjection_user_summaries_categories)
###add in mean/sd of hue/saturation/value mean/sd
this_mean_values <- aggregate(merged_summary_values[, c('hue_mean')],
by = list(Category = merged_summary_values$Category),
FUN = mean, na.rm = TRUE)
names(this_mean_values) <- c('Group', 'hue_mean')
this_sd_values <- aggregate(merged_summary_values[, c('hue_mean')],
by = list(Category = merged_summary_values$Category),
FUN = sd, na.rm = TRUE)
names(this_sd_values) <- c('Group', 'hue_sd')
merged_summary_values_categories <- merge(merged_summary_values_categories, this_mean_values)
merged_summary_values_categories <- merge(merged_summary_values_categories, this_sd_values)
##saturation
this_mean_values <- aggregate(merged_summary_values[, c('saturation_mean')],
by = list(Category = merged_summary_values$Category),
FUN = mean, na.rm = TRUE)
names(this_mean_values) <- c('Group', 'saturation_mean')
this_sd_values <- aggregate(merged_summary_values[, c('saturation_mean')],
by = list(Category = merged_summary_values$Category),
FUN = sd, na.rm = TRUE)
names(this_sd_values) <- c('Group', 'saturation_sd')
merged_summary_values_categories <- merge(merged_summary_values_categories, this_mean_values)
merged_summary_values_categories <- merge(merged_summary_values_categories, this_sd_values)
##value
this_mean_values <- aggregate(merged_summary_values[, c('value_mean')],
by = list(Category = merged_summary_values$Category),
FUN = mean, na.rm = TRUE)
names(this_mean_values) <- c('Group', 'value_mean')
this_sd_values <- aggregate(merged_summary_values[, c('value_mean')],
by = list(Category = merged_summary_values$Category),
FUN = sd, na.rm = TRUE)
names(this_sd_values) <- c('Group', 'value_sd')
merged_summary_values_categories <- merge(merged_summary_values_categories, this_mean_values)
merged_summary_values_categories <- merge(merged_summary_values_categories, this_sd_values)
#put ImageSet back in
library(stringr)
merged_summary_values_categories$ImageSet <- str_split_fixed(merged_summary_values_categories$Group, '_', 2)[,1]
###add in p-value for difference in craving between injection and non-injection users for each category
merged_summary_values_categories$p_cravingdelta_injectionVnon <- NA
for (category in unique(subject_data$Category)){
injection_craving_ratings <- subject_data[(subject_data$Category == category) & subject_data$InjectionUser & subject_data$RatingType == 'craving', 'Value']
noninjection_craving_ratings <- subject_data[(subject_data$Category == category) & (!subject_data$InjectionUser) & subject_data$RatingType == 'craving', 'Value']
this_test <- t.test(injection_craving_ratings, noninjection_craving_ratings)
merged_summary_values_categories[merged_summary_values_categories$Group == category, 'p_cravingdelta_injectionVnon'] <- this_test$p.value
}
library(dplyr)
library(data.table)
merged_summary_values <- rbindlist(list(merged_summary_values, merged_summary_values_categories), fill = TRUE, use.names = TRUE)
merged_summary_values <- data.frame(merged_summary_values)
all_data_summaries_sets <- one_summary(subject_data, 'allsubjects', 'ImageSet')
injection_user_summaries_sets <- one_summary(subject_data[subject_data$InjectionUser,], 'injectionusers', 'ImageSet')
noninjection_user_summaries_sets <- one_summary(subject_data[!subject_data$InjectionUser,], 'noninjectionusers', 'ImageSet')
merged_summary_values_sets <- merge(all_data_summaries_sets, injection_user_summaries_sets)
merged_summary_values_sets <- merge(merged_summary_values_sets, noninjection_user_summaries_sets)
###HSV code
###add in mean/sd of hue/saturation/value mean/sd
this_mean_values <- aggregate(merged_summary_values[, c('hue_mean')],
by = list(ImageSet = merged_summary_values$ImageSet),
FUN = mean, na.rm = TRUE)
names(this_mean_values) <- c('Group', 'hue_mean')
this_sd_values <- aggregate(merged_summary_values[, c('hue_mean')],
by = list(ImageSet = merged_summary_values$ImageSet),
FUN = sd, na.rm = TRUE)
names(this_sd_values) <- c('Group', 'hue_sd')
merged_summary_values_sets <- merge(merged_summary_values_sets, this_mean_values)
merged_summary_values_sets <- merge(merged_summary_values_sets, this_sd_values)
##saturation
this_mean_values <- aggregate(merged_summary_values[, c('saturation_mean')],
by = list(ImageSet = merged_summary_values$ImageSet),
FUN = mean, na.rm = TRUE)
names(this_mean_values) <- c('Group', 'saturation_mean')
this_sd_values <- aggregate(merged_summary_values[, c('saturation_mean')],
by = list(ImageSet = merged_summary_values$ImageSet),
FUN = sd, na.rm = TRUE)
names(this_sd_values) <- c('Group', 'saturation_sd')
merged_summary_values_sets <- merge(merged_summary_values_sets, this_mean_values)
merged_summary_values_sets <- merge(merged_summary_values_sets, this_sd_values)
##value
this_mean_values <- aggregate(merged_summary_values[, c('value_mean')],
by = list(ImageSet = merged_summary_values$ImageSet),
FUN = mean, na.rm = TRUE)
names(this_mean_values) <- c('Group', 'value_mean')
this_sd_values <- aggregate(merged_summary_values[, c('value_mean')],
by = list(ImageSet = merged_summary_values$ImageSet),
FUN = sd, na.rm = TRUE)
names(this_sd_values) <- c('Group', 'value_sd')
merged_summary_values_sets <- merge(merged_summary_values_sets, this_mean_values)
merged_summary_values_sets <- merge(merged_summary_values_sets, this_sd_values)
#put ImageSet back in
library(stringr)
merged_summary_values_sets$ImageSet <- merged_summary_values_sets$Group
###add in p-value for difference in craving between injection and non-injection users for each category
merged_summary_values_sets$p_cravingdelta_injectionVnon <- NA
for (ImageSet in unique(subject_data$ImageSet)){
injection_craving_ratings <- subject_data[(subject_data$ImageSet == ImageSet) & subject_data$InjectionUser & subject_data$RatingType == 'craving', 'Value']
noninjection_craving_ratings <- subject_data[(subject_data$ImageSet == ImageSet) & (!subject_data$InjectionUser) & subject_data$RatingType == 'craving', 'Value']
this_test <- t.test(injection_craving_ratings, noninjection_craving_ratings)
merged_summary_values_sets[merged_summary_values_sets$Group == ImageSet, 'p_cravingdelta_injectionVnon'] <- this_test$p.value
}
library(dplyr)
library(data.table)
merged_summary_values <- rbindlist(list(merged_summary_values, merged_summary_values_sets), fill = TRUE, use.names = TRUE)
merged_summary_values <- data.frame(merged_summary_values)
###HSV code
#variables to write out, in a reasonable order
vars_to_save <- c("Group", "ImageSet", "File", "Category",
"allsubjects_valence_mean", "allsubjects_valence_sd", "allsubjects_arousal_mean", "allsubjects_arousal_sd",
"allsubjects_craving_mean", "allsubjects_craving_sd", "allsubjects_typicality_mean", "allsubjects_typicality_sd",
"allsubjects_FractionNeither", "allsubjects_FractionMeth", "allsubjects_FractionOpioid", "allsubjects_FractionBoth", "allsubjects_MethToOpioid",
"injectionusers_valence_mean", "injectionusers_valence_sd", "injectionusers_arousal_mean", "injectionusers_arousal_sd",
"injectionusers_craving_mean", "injectionusers_craving_sd", "injectionusers_typicality_mean", "injectionusers_typicality_sd",
"injectionusers_FractionNeither", "injectionusers_FractionMeth", "injectionusers_FractionOpioid", "injectionusers_FractionBoth", "injectionusers_MethToOpioid",
"noninjectionusers_valence_mean", "noninjectionusers_valence_sd", "noninjectionusers_arousal_mean", "noninjectionusers_arousal_sd",
"noninjectionusers_craving_mean", "noninjectionusers_craving_sd", "noninjectionusers_typicality_mean", "noninjectionusers_typicality_sd",
"noninjectionusers_FractionNeither", "noninjectionusers_FractionMeth", "noninjectionusers_FractionOpioid", "noninjectionusers_FractionBoth",
"noninjectionusers_MethToOpioid",
"hue_mean", "hue_sd", "saturation_mean", "saturation_sd", "value_mean", "value_sd", "p_cravingdelta_injectionVnon")
write.csv(format(merged_summary_values[, vars_to_save], digits = 3), 'DCR_summaries_7-3-2019.csv', row.names = FALSE)
#only want image summaries, not category means, for example
plot_vals <- merged_summary_values[!is.na(merged_summary_values$File),]
#see how distance from neutral compares with mean valence
ggplot(data = plot_vals, aes(x = allsubjects_valence_mean, y = allsubjects_valence_fromneutral_mean, color = ImageSet)) + geom_point() +
xlab('valence') + ylab('valence distance to mean')+ geom_smooth(method = 'lm')  +
scale_color_manual(values = cols)
print("#####Test for control images")
cor.test(plot_vals$allsubjects_valence_mean[plot_vals$ImageSet == 'control'],plot_vals$allsubjects_valence_fromneutral_mean[plot_vals$ImageSet == 'control'] )
print("#####Test for meth images")
cor.test(plot_vals$allsubjects_valence_mean[plot_vals$ImageSet == 'meth'],plot_vals$allsubjects_valence_fromneutral_mean[plot_vals$ImageSet == 'meth'] )
print("#####Test for opioid images")
cor.test(plot_vals$allsubjects_valence_mean[plot_vals$ImageSet == 'opioid'],plot_vals$allsubjects_valence_fromneutral_mean[plot_vals$ImageSet == 'opioid'] )
scatter_data <- subject_data[subject_data$RatingType == c('valence'), c('id', 'ImageSet', 'ImageSetFile', 'RatingType', 'Value')]
names(scatter_data)[names(scatter_data) == 'Value'] <- 'Valence'
scatter_data$ValenceFromMean <- abs(scatter_data$Valence - 5)
#c <- cor(craving_data$Craving, typicality_data$Typicality)
ggplot(scatter_data, aes(x = Valence, y = ValenceFromMean, color = ImageSet)) + geom_point() + geom_smooth(method = 'lm')  +
scale_color_manual(values = cols)
ggplot(scatter_data, aes(x = Valence, y = ValenceFromMean, color = ImageSet)) + geom_hex() + geom_smooth(method = 'lm')  +
scale_color_manual(values = cols)
scatter_data <- subject_data[subject_data$ImageSet %in% c('meth', 'opioid'), c('id', 'ImageSet', 'ImageSetFile', 'RatingType', 'Value')]
craving_data <- scatter_data[scatter_data$RatingType == 'craving',]
typicality_data <- scatter_data[scatter_data$RatingType == 'typicality',]
craving_data$Craving <- craving_data$Value
typicality_data$Typicality <- typicality_data$Value
correlation <- cor(craving_data$Craving, typicality_data$Typicality)
scatter_data <- merge(craving_data[, c('id', 'ImageSet', 'ImageSetFile', 'Craving')], typicality_data[, c('id', 'ImageSet', 'ImageSetFile', 'Typicality')])
ggplot(scatter_data, aes(x = Craving, y = Typicality, color = ImageSet)) + geom_point() + geom_smooth(method = 'lm') +
ggtitle(paste0('r = ', round(correlation, 2), '\nBut not appropriate, since multiple measures per subject')) +
scale_color_manual(values = cols)
mean_scatter_data <- merged_summary_values[merged_summary_values$ImageSet %in% c('meth', 'opioid'),]
correlation <- cor(mean_scatter_data$allsubjects_craving_mean, mean_scatter_data$allsubjects_typicality_mean)
ggplot(mean_scatter_data, aes(x = allsubjects_craving_mean, y = allsubjects_typicality_mean, color = ImageSet)) + geom_point() + geom_smooth(method = 'lm')  +
scale_y_continuous(breaks = c(0, 25, 50, 75, 100), limits = c(0, 100)) +
scale_x_continuous(breaks = c(0, 25, 50, 75, 100), limits = c(0, 100)) +
xlab('Craving Mean') + ylab ('Typicality Mean') + ggtitle(paste0('r = ', round(correlation, 2))) +
scale_color_manual(values = cols)
make_plotset <- function(data_to_plot, main_title, filename, group){
p1 <- ggplot(data_to_plot, aes_string(x = 'allsubjects_valence_mean', fill = 'ImageSet')) +
geom_histogram(binwidth = 0.5, alpha = 0.5, position = 'identity') + theme(legend.position="none") +
scale_color_manual(values = cols)
p2 <- ggplot(data_to_plot, aes_string(x = 'allsubjects_arousal_mean', fill = 'ImageSet')) +
geom_histogram(binwidth = 0.5, alpha = 0.5, position = 'identity') + theme(legend.position="none") +
scale_color_manual(values = cols)
p3 <- ggplot(data_to_plot, aes_string(x = 'allsubjects_craving_mean', fill = 'ImageSet')) +
geom_histogram(binwidth = 10, alpha = 0.5, position = 'identity') + theme(legend.position="none") +
scale_color_manual(values = cols)
p4 <- ggplot(data_to_plot, aes_string(x = 'allsubjects_typicality_mean', fill = 'ImageSet')) +
geom_histogram(binwidth = 10, alpha = 0.5, position = 'identity') + theme(legend.position="none") +
scale_color_manual(values = cols)
p5 <- ggplot(data_to_plot, aes_string(x = 'hue_mean', fill = 'ImageSet')) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = 'identity') + theme(legend.position="none") +
scale_color_manual(values = cols)
p6 <- ggplot(data_to_plot, aes_string(x = 'saturation_mean', fill = 'ImageSet')) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = 'identity') + theme(legend.position="none") +
scale_color_manual(values = cols)
p7 <- ggplot(data_to_plot, aes_string(x = 'value_mean', fill = 'ImageSet')) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = 'identity') +
scale_color_manual(values = cols)
#png(filename, width = 1400, height = 400)
#grid.arrange(p1, p2, p3, p4, p5, p6, p7, ncol = 7, top = textGrob(main_title, gp=gpar(fontsize = 50)))
#dev.off()
print(p1)
print(p2)
print(p3)
print(p4)
print(p5)
print(p6)
print(p7)
}
library(sm)
one_density_plot <- function(var_to_plot, label){
sm.density.compare(merged_summary_values[, var_to_plot], as.factor(merged_summary_values$ImageSet), lwd = 5)
title(main=label)
colfill<-c(2:(2+length(levels(as.factor(merged_summary_values$ImageSet)))))
legend('topright', levels(as.factor(merged_summary_values$ImageSet)), fill=colfill)
}
source('R_rainclouds.R')
library(cowplot)
one_raincloud_plot <- function(var_to_plot, label){
p6 <- ggplot(subject_data[subject_data$RatingType == 'arousal',],aes(x=ImageSet,y=Value, fill = ImageSet, colour = ImageSet))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
#geom_point(position = position_jitter(width = .15), size = .25)+
geom_point(position = position_jitter(width = 1), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSet)+0.25, y = Value),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('Arousal')+xlab('ImageSet')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE) +
ggtitle("Figure R6: Change in Colour Palette") +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols)
#scale_colour_brewer(palette = "Dark2")+
#scale_fill_brewer(palette = "Dark2")+
ggsave(paste0(label, '.png'), width = w, height = h)
p6
}
subject_data$ImageSetCap <- as.character(subject_data$ImageSet)
subject_data$ImageSetCap[subject_data$ImageSetCap == 'meth'] <- 'Meth'
subject_data$ImageSetCap[subject_data$ImageSetCap == 'opioid'] <- 'Opioid'
subject_data$ImageSetCap[subject_data$ImageSetCap == 'control'] <- 'Control'
subject_data$ImageSetCap <- factor(subject_data$ImageSetCap, levels = c('Meth', 'Opioid', 'Control'))
p1 <- ggplot(subject_data[subject_data$RatingType == 'craving',],aes(x=ImageSetCap,y=Value, fill = ImageSetCap, colour = ImageSetCap))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSetCap)+0.25, y = Value),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('')+xlab('')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE)  +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
ggtitle("Craving") + scale_y_continuous(breaks = c(0, 25, 50, 75, 100), limits = c(0, 100))
p2 <- ggplot(subject_data[subject_data$RatingType == 'arousal',],aes(x=ImageSetCap,y=Value, fill = ImageSetCap, colour = ImageSetCap))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSetCap)+0.25, y = Value),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('')+xlab('')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE)  +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
ggtitle("Arousal") + scale_y_continuous(breaks = c(1, 3, 5, 7, 9), limits = c(1, 9))
p3 <- ggplot(subject_data[subject_data$RatingType == 'valence',],aes(x=ImageSetCap,y=Value, fill = ImageSetCap, colour = ImageSetCap))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSetCap)+0.25, y = Value),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('')+xlab('')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
ggtitle("Valence") + scale_y_continuous(breaks = c(1, 3, 5, 7, 9), limits = c(1, 9))
png('rainclouds.png', width = 1400, height = 400)
print(annotate_figure(ggarrange(p1, p2, p3, ncol = 3, nrow = 1, common.legend = TRUE, legend = 'right'), top = text_grob('Rainclouds', color = 'red')))
dev.off()
p4 <- ggplot(subject_data,aes(x=ImageSetCap,y=millisecondsOnPage / 1000, fill = ImageSetCap, colour = ImageSetCap))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSetCap)+0.25, y = millisecondsOnPage / 1000),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('')+xlab('')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE) +
scale_color_manual(values = cols)
ggtitle("SecondsOnPage") #+ scale_y_continuous(breaks = c(1, 3, 5, 7, 9), limits = c(1, 9))
p5 <- ggplot(subject_data,aes(x=ImageSetCap,y=responseDelay / 1000, fill = ImageSetCap, colour = ImageSetCap))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSetCap)+0.25, y = responseDelay / 1000),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('')+xlab('')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE) +
scale_color_manual(values = cols)
ggtitle("ResponseDelay") #+ scale_y_continuous(breaks = c(1, 3, 5, 7, 9), limits = c(1, 9))
png('RTrainclouds.png', width = 1400, height = 400)
print(annotate_figure(ggarrange(p4, p5, ncol = 1, nrow = 2, common.legend = TRUE, legend = 'right'), top = text_grob('RTRainclouds', color = 'red')))
dev.off()
p1 <- ggplot(subject_data[subject_data$RatingType == 'craving',],
aes(x = Value, y = millisecondsOnPage / 1000,color = ImageSet)) + geom_point() +
xlab('Craving') + ylab('ScondsOnPage') + #scale_x_continuous(breaks = c(60, 70, 80, 90, 100), limits = c(60, 100)) +
#scale_y_continuous(breaks = c(60, 70, 80, 90, 100), limits = c(60, 100)) +
theme(axis.text = element_text(size = 18), plot.title = element_text(size = 24), legend.text=element_text(size=14)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols)
p2 <- ggplot(subject_data[subject_data$RatingType == 'craving',],
aes(x = Value, y = responseDelay / 1000,color = ImageSet)) + geom_point() +
xlab('Craving') + ylab('ResponseDelay') + #scale_x_continuous(breaks = c(60, 70, 80, 90, 100), limits = c(60, 100)) +
#scale_y_continuous(breaks = c(60, 70, 80, 90, 100), limits = c(60, 100)) +
theme(axis.text = element_text(size = 18), plot.title = element_text(size = 24), legend.text=element_text(size=14)) +
geom_smooth(method = 'lm') +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols)
png('RTCravingScatter.png', width = 400, height = 800)
print(annotate_figure(ggarrange(p1, p2, ncol = 1, nrow = 2, common.legend = TRUE, legend = 'right'), top = text_grob('RTScatters', color = 'red')))
dev.off()
craving_data <- subject_data[subject_data$RatingType == 'craving',]
#set threshold of 20 seconds, remove 0.6% of data
sum(craving_data$millisecondsOnPage > 10000) / nrow(craving_data)
one_density_plot('allsubjects_valence_mean', 'Valence')
one_density_plot('allsubjects_arousal_mean', 'Arousal')
one_density_plot('allsubjects_craving_mean', 'Craving')
one_density_plot('allsubjects_typicality_mean', 'Typicality')
one_density_plot('hue_mean', 'Hue')
one_density_plot('saturation_mean', 'Saturation')
one_density_plot('value_mean', 'Value')
p1
print(annotate_figure(ggarrange(p1, p2, p3, ncol = 3, nrow = 1, common.legend = TRUE, legend = 'right'), top = text_grob('Rainclouds', color = 'red')))
p1 <- ggplot(subject_data[subject_data$RatingType == 'craving',],aes(x=ImageSetCap,y=Value, fill = ImageSetCap, colour = ImageSetCap))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSetCap)+0.25, y = Value),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('')+xlab('')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE)  +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
ggtitle("Craving") + scale_y_continuous(breaks = c(0, 25, 50, 75, 100), limits = c(0, 100))
p1
p2 <- ggplot(subject_data[subject_data$RatingType == 'arousal',],aes(x=ImageSetCap,y=Value, fill = ImageSetCap, colour = ImageSetCap))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSetCap)+0.25, y = Value),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('')+xlab('')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE)  +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
ggtitle("Arousal") + scale_y_continuous(breaks = c(1, 3, 5, 7, 9), limits = c(1, 9))
p3 <- ggplot(subject_data[subject_data$RatingType == 'valence',],aes(x=ImageSetCap,y=Value, fill = ImageSetCap, colour = ImageSetCap))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSetCap)+0.25, y = Value),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('')+xlab('')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
ggtitle("Valence") + scale_y_continuous(breaks = c(1, 3, 5, 7, 9), limits = c(1, 9))
png('rainclouds.png', width = 1400, height = 400)
print(annotate_figure(ggarrange(p1, p2, p3, ncol = 3, nrow = 1, common.legend = TRUE, legend = 'right'), top = text_grob('Rainclouds', color = 'red')))
dev.off()
p4 <- ggplot(subject_data,aes(x=ImageSetCap,y=millisecondsOnPage / 1000, fill = ImageSetCap, colour = ImageSetCap))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSetCap)+0.25, y = millisecondsOnPage / 1000),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('')+xlab('')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
ggtitle("SecondsOnPage") #+ scale_y_continuous(breaks = c(1, 3, 5, 7, 9), limits = c(1, 9))
p5 <- ggplot(subject_data,aes(x=ImageSetCap,y=responseDelay / 1000, fill = ImageSetCap, colour = ImageSetCap))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim =  FALSE)+
geom_point(position = position_jitter(width = .15), size = .25)+
geom_boxplot(aes(x = as.numeric(ImageSetCap)+0.25, y = responseDelay / 1000),outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
ylab('')+xlab('')+coord_flip()+theme_cowplot()+guides(fill = FALSE,
colour = FALSE) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
ggtitle("ResponseDelay") #+ scale_y_continuous(breaks = c(1, 3, 5, 7, 9), limits = c(1, 9))
png('RTrainclouds.png', width = 1400, height = 400)
print(annotate_figure(ggarrange(p4, p5, ncol = 1, nrow = 2, common.legend = TRUE, legend = 'right'), top = text_grob('RTRainclouds', color = 'red')))
dev.off()
craving_data <- subject_data[subject_data$RatingType == 'craving',]
#set threshold of 20 seconds, remove 0.6% of data
sum(craving_data$millisecondsOnPage > 10000) / nrow(craving_data)
one_density_plot('allsubjects_valence_mean', 'Valence')
one_density_plot('allsubjects_arousal_mean', 'Arousal')
one_density_plot('allsubjects_craving_mean', 'Craving')
one_density_plot('allsubjects_typicality_mean', 'Typicality')
one_density_plot('hue_mean', 'Hue')
one_density_plot('saturation_mean', 'Saturation')
one_density_plot('value_mean', 'Value')
library(ggplot2)
library(gridExtra)
library(grid)
library(ggpubr)
#put levels in the order we like
subject_data$RelatedCategory <- factor(subject_data$RelatedCategory, levels = c('Neither', 'Meth', 'Opioid', 'Both'))
#subject_data$Category[subject_data$Category == 'meth_injection_instrument'] <- 'meth_instrument'
#cols <- c('control' = 'green', 'meth' = 'red', 'opioid' = 'blue', 'Control' = 'green', 'Meth' = 'red', 'Opioid' = 'blue')
cols <- c('control' = '#00BA38', 'meth' = '#F8766D', 'opioid' = '#619CFF', 'Control' = '#00BA38', 'Meth' = '#F8766D', 'Opioid' = '#619CFF')
for (subject in unique(subject_data$id)){
data_to_plot <- subject_data[subject_data$id == subject,]
p1 <- ggplot(data = data_to_plot[data_to_plot$RatingType == 'valence',]) +
geom_point(aes(x = Order, y = Value, color = ImageSet)) + ggtitle('Valence') +
xlab('') + ylab('') + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = c(0, 90, 180, 270, 360), limits = c(0, 360)) +
scale_y_continuous(breaks = c(1, 3, 5, 7, 9), limits = c(1, 9)) +
theme(axis.text = element_text(size = 18), plot.title = element_text(size = 24), legend.text=element_text(size=14)) +
scale_color_manual(values = cols)
p2 <- ggplot(data = data_to_plot[data_to_plot$RatingType == 'arousal',]) +
geom_point(aes(x = Order, y = Value, color = ImageSet)) + ggtitle('Arousal') +
xlab('') + ylab('') + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = c(0, 90, 180, 270, 360), limits = c(0, 360)) +
scale_y_continuous(breaks = c(1, 3, 5, 7, 9), limits = c(1, 9)) +
theme(axis.text = element_text(size = 18), plot.title = element_text(size = 24), legend.text=element_text(size=14)) +
scale_color_manual(values = cols)
p3 <- ggplot(data = data_to_plot[data_to_plot$RatingType == 'craving',]) +
geom_point(aes(x = Order, y = Value, color = ImageSet)) + ggtitle('Craving') +
xlab('') + ylab('') + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = c(0, 90, 180, 270, 360), limits = c(0, 360)) +
scale_y_continuous(breaks = c(0, 25, 50, 75, 100), limits = c(0, 100)) +
theme(axis.text = element_text(size = 18), plot.title = element_text(size = 24), legend.text=element_text(size=14)) +
scale_color_manual(values = cols)
p4 <- ggplot(data = data_to_plot[data_to_plot$RatingType == 'typicality',]) +
geom_point(aes(x = Order, y = Value, color = ImageSet)) + ggtitle('Typicality') +
xlab('') + ylab('') + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = c(0, 90, 180, 270, 360), limits = c(0, 360)) +
scale_y_continuous(breaks = c(0, 25, 50, 75, 100), limits = c(0, 100)) +
theme(axis.text = element_text(size = 18), plot.title = element_text(size = 24), legend.text=element_text(size=14)) +
scale_color_manual(values = cols)
p5 <- ggplot(data = data_to_plot[data_to_plot$RatingType == 'related',]) +
geom_point(aes(x = Order, y = RelatedCategory, color = ImageSet)) + ggtitle('Relatedness') +
xlab('') + ylab('') + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = c(0, 90, 180, 270, 360), limits = c(0, 360)) +
theme(axis.text = element_text(size = 18), plot.title = element_text(size = 24), legend.text=element_text(size=14)) +
scale_color_manual(values = cols)
filename <- paste(subject, 'responses.png', sep = '_')
png(filename, width = 1400, height = 400)
print(annotate_figure(ggarrange(p5, p1, p2, p3, p4, ncol = 5, nrow = 1, common.legend = TRUE, legend = 'right'), top = text_grob(subject, color = 'red')))
dev.off()
print(p1 + ggtitle(subject))
print(p2 + ggtitle(subject))
print(p3 + ggtitle(subject))
print(p4 + ggtitle(subject))
print(p5 + ggtitle(subject))
}
